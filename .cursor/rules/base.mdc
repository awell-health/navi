# Navi Monorepo Base Rules

## 🎯 What This System Does

**Navi** is a healthcare SDK that embeds care activities (forms, checklists, messages) into customer websites via secure iframes. Think Stripe for healthcare workflows.

## 👤 User Journey

### **Customer Integration**:

1. **Developer** adds Navi script to their healthcare website or internal site
2. **Developer** calls `navi.render()` to embed a care flow
3. **Patient or stakeholder** sees activities appear in an iframe on the customer site
4. **Patient or stakeholder** completes activities (forms, checklists, etc.)
5. **Customer** receives real-time events about patient progress

### **Two Use Cases**:

- **Resume existing care flow**: Patient returns to continue where they left off
- **Start new care flow**: Create new care plan for patient from scratch

## 🏗️ System Architecture (High Level)

```
Customer Website → navi.js SDK → navi-portal (iframe) → module-navi (GraphQL API)
```

### **Package Purposes**:

- `packages/navi-core/` - Foundation types, event definitions (source of truth)
- `packages/navi.js/` - CDN JavaScript SDK (customer-facing, 15KB max)
- `packages/navi-js/` - NPM wrapper for navi.js, version-pinned
- `packages/navi-react/` - React components
- `apps/navi-portal/` - Embed application, React components, JWT auth
- `examples/*` - example implementations

## 🔄 Simplified Flow (NEW)

### **What Happens When User Calls `navi.render()`**:

1. **Session Creation**: SDK posts to `/api/create-careflow-session` with either:

   - `careflowId` (resume existing) OR
   - `careflowDefinitionId` (start new)

2. **Token Generation**: Server creates encrypted token with all needed data and returns `embedUrl`

3. **Iframe Creation**: SDK creates iframe pointing to embed URL

4. **Single Route Handling**: `/embed/[careflow_id]` handles both cases:
   - Real careflow ID → shows existing activities
   - Special "new" ID → shows creation flow

### **Key Insight**:

- **One API endpoint** handles both use cases
- **One embed route** handles both use cases
- **Different token types** for internal vs external communication

## 🔐 Security & Authentication

### **Two-Phase Authentication**:

## 🧪 Testing Requirements (MANDATORY)

## 🧪 Testing Strategy

### **Developers Should Always Test Cross-Origin**:

- Start navi-portal on localhost:3000
- Start test app on localhost:3001
- Verify iframe communication works
- Test both existing and new care flow paths

### **Critical Test Cases**:

- Event messaging between iframe and parent
- Memory cleanup when destroying instances
- Both careflowId and careflowDefinitionId flows
- Token validation and expiration

### **File Protection**:

- NEVER modify .env files - only user can change these
- NEVER bypass file editing restrictions
- ALWAYS ask user for environment modifications

### **Development Phase (v0.x.x)**:

- Breaking changes are acceptable
- Focus on getting architecture right first
- Always coordinate changes across packages
- Test thoroughly before releasing

## 🎯 Success Metrics

- Cross-origin messaging works reliably
- Both use cases (existing/new) work end-to-end
- Bundle sizes stay under limits (15KB for navi.js)
- Security validation passes
- Healthcare compliance maintained

## 📞 When to Ask User

- Major architectural changes
- Security-related modifications
- Environment/deployment decisions
- Breaking changes that affect customer integration
- Authentication flow modifications

**Remember**: This is a healthcare SDK where patient data security and regulatory compliance are paramount.
