---
description: Navi Monorepo Base Rules - Critical foundation information for all agents
alwaysApply: true
---

# Navi Monorepo Base Rules

## 🚧 Development Phase: v0.x.x
- **Breaking changes are ACCEPTABLE** - Focus on getting architecture right
- **API can evolve** - Don't be paralyzed by backward compatibility
- **Coordinate changes** - Update all dependent packages together
- **Test thoroughly** - Cross-origin integration is critical

## 📦 Package Dependency Flow (CRITICAL)
```
navi-core (foundation) → navi-portal (embed API) → navi.js (CDN SDK) → navi-js (NPM wrapper)
```

### Package Locations & Purposes:
- `packages/navi-core/` - Foundation types, event definitions (source of truth)
- `apps/navi-portal/` - Embed application, React components, JWT auth
- `packages/navi.js/` - CDN JavaScript SDK (customer-facing, 15KB max)
- `packages/navi-js/` - NPM wrapper (NOT IMPLEMENTED)
- `packages/navi-react/` - React components (NOT IMPLEMENTED)

## 🚨 File Protection Rules (ABSOLUTE)
- **NEVER modify .env files** - Only user can change these
- **NEVER bypass file editing restrictions** - No shell command workarounds
- **ALWAYS ask user** for environment file modifications

## 🧪 Testing Requirements (MANDATORY)
### Cross-Origin Testing:
```bash
# ALWAYS test the full integration flow
cd apps/navi-portal && pnpm dev      # localhost:3000
cd examples/test-integration && pnpm dev  # localhost:3001
# Visit: http://localhost:3001 - should see event stream
```

### Testing Checklist:
- [ ] Cross-origin messaging (3001 → 3000)
- [ ] Event data structures correct
- [ ] Memory cleanup on instance destruction
- [ ] Error handling for invalid events

## ⚠️ Known Issues (CRITICAL)
1. **Event naming inconsistency**: `data-change` vs `dataChange`
2. **Environment hardcoded**: localhost URLs need production config
3. **Auth not integrated**: JWT exists but not connected
4. **Missing packages**: navi-js (NPM wrapper) not implemented

## 🔧 Common Development Patterns

### Memory Management:
```typescript
// ALWAYS clean up properly
destroyInstance(instanceId: string) {
  this.instances.delete(instanceId);
  this.eventHandlers.delete(instanceId);  // ← Don't forget this
}
```

### Environment Detection:
```typescript
// Current pattern (needs production config)
const embedUrl = process.env.NODE_ENV === 'production' 
  ? new URL(`https://embed.navi.com/embed/${pathwayId}`)
  : new URL(`http://localhost:3000/embed/${pathwayId}`);
```

## 📋 Integration Status Summary
- ✅ **Event system**: 8 event types working
- ✅ **Cross-origin messaging**: localhost:3001 ↔ localhost:3000
- ✅ **navi.js SDK**: Global API functional
- 🟡 **Authentication**: JWT present but not integrated
- 🟡 **Environment detection**: Hardcoded localhost URLs
- 🔴 **NPM wrapper**: Not implemented

## 🎯 Success Criteria
- [ ] Cross-origin messaging working
- [ ] Security validation in place
- [ ] Bundle sizes within limits (15KB for navi.js)
- [ ] Integration tests passing
- [ ] Documentation updated

## 📞 When to Ask User
- Major architectural changes
- Removing security features
- Breaking bundle size budget significantly
- Environment/deployment configuration
- Authentication integration decisions

**Remember: This is a healthcare SDK. Quality and security are paramount.**