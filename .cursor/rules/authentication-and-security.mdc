---
globs: **/*jwt*,**/*auth*,apps/navi-portal/src/lib/auth/**/*,*Resolver*,*Context*
alwaysApply: false
---

# Navi Authentication & Security Rules

## üö® ABSOLUTE SECURITY RULES

### **Environment File Protection**

- **ABSOLUTE RULE**: Only the user can modify `.env` files (Memory ID: 2526200)
- **NEVER** bypass file editing restrictions using shell commands (Memory ID: 2526076)
- **ALWAYS** ask user to handle environment file modifications manually
- **NO EXCEPTIONS**: This rule overrides all other considerations

### **HIPAA Compliance Requirements**

- **Logging**: HIPAA-aligned logging - no PHI in logs
- **Data handling**: Appropriate data retention and deletion policies
- **Audit trails**: All authentication events must be logged securely
- **Encryption**: All PHI must be encrypted in transit and at rest

## üîê JWT Authentication Patterns

### **Secure Token Creation**

```typescript
// ‚úÖ CORRECT - Secure JWT handling in navi-portal
import { SignJWT, jwtVerify } from "jose";

// Use proper key management
const secret = new TextEncoder().encode(process.env.JWT_SECRET);

// Include proper claims
const token = await new SignJWT({
  sub: userId,
  careflow_id: careflowId,
  iat: Math.floor(Date.now() / 1000),
  exp: Math.floor(Date.now() / 1000) + 60 * 60, // 1 hour
})
  .setProtectedHeader({ alg: "HS256" })
  .sign(secret);
```

### **Token Validation Patterns**

```typescript
// ‚úÖ Proper JWT verification with error handling
async function verifyToken(token: string) {
  try {
    const { payload } = await jwtVerify(token, secret);

    // Validate required claims
    if (!payload.sub || !payload.careflow_id) {
      throw new Error("Missing required claims");
    }

    return payload;
  } catch (error) {
    // Log security events (without PHI)
    logger.warn("JWT verification failed", {
      error: error.message,
      timestamp: new Date().toISOString(),
    });
    throw new Error("Invalid token");
  }
}
```

## üõ°Ô∏è Cross-Origin Security

### **iframe Security Patterns**

```typescript
// ‚úÖ Proper Content Security Policy
const csp = {
  "script-src": "'self' https://cdn.awellhealth.com",
  "frame-src": "https://navi-portal.awellhealth.com",
  "connect-src": "'self' https://api.navi.com",
  "frame-ancestors": "https://trusted-customer-domain.com",
};
```

### **PostMessage Security**

```typescript
// ‚úÖ Secure cross-origin messaging
window.addEventListener("message", (event) => {
  // Always validate origin
  const allowedOrigins = [
    "https://navi-portal.awellhealth.com",
    "http://localhost:3000", // Dev only
    "http://localhost:3001", // Dev only
  ];

  if (!allowedOrigins.includes(event.origin)) {
    logger.warn("Rejected message from unauthorized origin", {
      origin: event.origin,
      timestamp: new Date().toISOString(),
    });
    return;
  }

  // Validate message structure
  if (!isValidNaviMessage(event.data)) {
    return;
  }

  handleMessage(event.data);
});
```

## üè• Healthcare Security Requirements

### **Patient Data Protection**

- **No PHI in URLs**: Never pass patient data in query parameters
- **Secure transmission**: All patient data via POST/PUT with proper encryption
- **Access logging**: Log access attempts without storing PHI
- **Session management**: Proper session timeout and cleanup

### **Audit Requirements**

```typescript
// ‚úÖ Proper security event logging
interface SecurityEvent {
  event_type: "auth_success" | "auth_failure" | "access_denied";
  user_id?: string; // Hash if necessary
  careflow_id?: string; // Business identifier, not PHI
  ip_address?: string; // For security monitoring
  user_agent?: string; // For device tracking
  timestamp: string;
}

function logSecurityEvent(event: SecurityEvent) {
  // Ensure no PHI in logs
  const sanitized = sanitizeForHIPAA(event);
  logger.info("Security event", sanitized);
}
```

## üîë Authentication Architecture

### **navi-portal Authentication Flow**

1. **External auth**: Customer provides JWT with user context
2. **Internal validation**: Verify JWT signature and claims
3. **Careflow authorization**: Check user access to specific careflow
4. **Session creation**: Create internal session with minimal claims
5. **Activity authorization**: Validate access per activity request

### **module-navi Authentication**

```typescript
// ‚úÖ Proper GraphQL context authentication
interface AuthenticatedContext {
  user_id: string;
  careflow_id: string;
  permissions: string[];
  tenant_id: string;
}

async function createAuthenticatedContext(
  token: string
): Promise<AuthenticatedContext> {
  const payload = await verifyToken(token);

  // Validate careflow access
  const hasAccess = await validateCareflowAccess(
    payload.sub,
    payload.careflow_id
  );

  if (!hasAccess) {
    throw new Error("Insufficient permissions");
  }

  return {
    user_id: payload.sub,
    careflow_id: payload.careflow_id,
    permissions: payload.permissions || [],
    tenant_id: payload.tenant_id,
  };
}
```

## üîß Security Development Patterns

### **Environment-Specific Security**

```typescript
// ‚úÖ Environment-aware security configuration
const securityConfig = {
  development: {
    allowedOrigins: ["http://localhost:3000", "http://localhost:3001"],
    jwtExpiry: "24h",
    requireHTTPS: false,
  },
  production: {
    allowedOrigins: ["https://navi-portal.awellhealth.com"],
    jwtExpiry: "1h",
    requireHTTPS: true,
  },
};

const config =
  securityConfig[process.env.NODE_ENV] || securityConfig.production;
```

## üéØ Security Testing Requirements

### **Authentication Testing**

- [ ] JWT signature validation works
- [ ] Expired tokens are rejected
- [ ] Invalid claims are handled properly
- [ ] Cross-origin restrictions enforced
- [ ] Session timeout works correctly

### **Authorization Testing**

- [ ] User can only access authorized careflows
- [ ] Activity permissions enforced
- [ ] Tenant isolation maintained
- [ ] Admin vs user permissions work

### **Security Integration Testing**

```bash
# Test cross-origin security
pnpm dev  # Starts localhost:3000 and localhost:3001

# Verify:
# 1. iframe loads with proper CSP
# 2. postMessage validation works
# 3. Authentication flows end-to-end
# 4. Unauthorized origins rejected
```

## üö® Security Incident Response

### **Authentication Failures**

- **Invalid tokens**: Log attempt, return generic error
- **Expired tokens**: Redirect to authentication flow
- **Missing tokens**: Return 401 with clear instructions
- **Brute force**: Implement rate limiting and alerting

### **Authorization Violations**

- **Careflow access denied**: Log attempt with user/careflow IDs
- **Activity permission denied**: Log and audit access attempt
- **Cross-tenant access**: Critical security alert required

## üè• Healthcare-Specific Security

### **Regulatory Compliance**

- **HIPAA**: All PHI handling must be HIPAA compliant
- **21 CFR Part 11**: Electronic records and signatures compliance
- **State regulations**: Consider state-specific healthcare data requirements
- **International**: GDPR compliance for international patients

### **Healthcare Security Patterns**

- **Audit logging**: All patient data access must be logged
- **Data minimization**: Only collect and store necessary PHI
- **Encryption**: AES-256 encryption for PHI at rest
- **Access controls**: Role-based access with principle of least privilege

# Navi Authentication & Security Rules

## üö® ABSOLUTE SECURITY RULES

### **Environment File Protection**

- **ABSOLUTE RULE**: Only the user can modify `.env` files (Memory ID: 2526200)
- **NEVER** bypass file editing restrictions using shell commands (Memory ID: 2526076)
- **ALWAYS** ask user to handle environment file modifications manually
- **NO EXCEPTIONS**: This rule overrides all other considerations

### **HIPAA Compliance Requirements**

- **Logging**: HIPAA-aligned logging - no PHI in logs
- **Data handling**: Appropriate data retention and deletion policies
- **Audit trails**: All authentication events must be logged securely
- **Encryption**: All PHI must be encrypted in transit and at rest

## üîê JWT Authentication Patterns

### **Secure Token Creation**

```typescript
// ‚úÖ CORRECT - Secure JWT handling in navi-portal
import { SignJWT, jwtVerify } from "jose";

// Use proper key management
const secret = new TextEncoder().encode(process.env.JWT_SECRET);

// Include proper claims
const token = await new SignJWT({
  sub: userId,
  careflow_id: careflowId,
  iat: Math.floor(Date.now() / 1000),
  exp: Math.floor(Date.now() / 1000) + 60 * 60, // 1 hour
})
  .setProtectedHeader({ alg: "HS256" })
  .sign(secret);
```

### **Token Validation Patterns**

```typescript
// ‚úÖ Proper JWT verification with error handling
async function verifyToken(token: string) {
  try {
    const { payload } = await jwtVerify(token, secret);

    // Validate required claims
    if (!payload.sub || !payload.careflow_id) {
      throw new Error("Missing required claims");
    }

    return payload;
  } catch (error) {
    // Log security events (without PHI)
    logger.warn("JWT verification failed", {
      error: error.message,
      timestamp: new Date().toISOString(),
    });
    throw new Error("Invalid token");
  }
}
```

## üõ°Ô∏è Cross-Origin Security

### **iframe Security Patterns**

```typescript
// ‚úÖ Proper Content Security Policy
const csp = {
  "script-src": "'self' https://cdn.awellhealth.com",
  "frame-src": "https://navi-portal.awellhealth.com",
  "connect-src": "'self' https://api.navi.com",
  "frame-ancestors": "https://trusted-customer-domain.com",
};
```

### **PostMessage Security**

```typescript
// ‚úÖ Secure cross-origin messaging
window.addEventListener("message", (event) => {
  // Always validate origin
  const allowedOrigins = [
    "https://navi-portal.awellhealth.com",
    "http://localhost:3000", // Dev only
    "http://localhost:3001", // Dev only
  ];

  if (!allowedOrigins.includes(event.origin)) {
    logger.warn("Rejected message from unauthorized origin", {
      origin: event.origin,
      timestamp: new Date().toISOString(),
    });
    return;
  }

  // Validate message structure
  if (!isValidNaviMessage(event.data)) {
    return;
  }

  handleMessage(event.data);
});
```

## üè• Healthcare Security Requirements

### **Patient Data Protection**

- **No PHI in URLs**: Never pass patient data in query parameters
- **Secure transmission**: All patient data via POST/PUT with proper encryption
- **Access logging**: Log access attempts without storing PHI
- **Session management**: Proper session timeout and cleanup

### **Audit Requirements**

```typescript
// ‚úÖ Proper security event logging
interface SecurityEvent {
  event_type: "auth_success" | "auth_failure" | "access_denied";
  user_id?: string; // Hash if necessary
  careflow_id?: string; // Business identifier, not PHI
  ip_address?: string; // For security monitoring
  user_agent?: string; // For device tracking
  timestamp: string;
}

function logSecurityEvent(event: SecurityEvent) {
  // Ensure no PHI in logs
  const sanitized = sanitizeForHIPAA(event);
  logger.info("Security event", sanitized);
}
```

## üîë Authentication Architecture

### **navi-portal Authentication Flow**

1. **External auth**: Customer provides JWT with user context
2. **Internal validation**: Verify JWT signature and claims
3. **Careflow authorization**: Check user access to specific careflow
4. **Session creation**: Create internal session with minimal claims
5. **Activity authorization**: Validate access per activity request

### **module-navi Authentication**

```typescript
// ‚úÖ Proper GraphQL context authentication
interface AuthenticatedContext {
  user_id: string;
  careflow_id: string;
  permissions: string[];
  tenant_id: string;
}

async function createAuthenticatedContext(
  token: string
): Promise<AuthenticatedContext> {
  const payload = await verifyToken(token);

  // Validate careflow access
  const hasAccess = await validateCareflowAccess(
    payload.sub,
    payload.careflow_id
  );

  if (!hasAccess) {
    throw new Error("Insufficient permissions");
  }

  return {
    user_id: payload.sub,
    careflow_id: payload.careflow_id,
    permissions: payload.permissions || [],
    tenant_id: payload.tenant_id,
  };
}
```

## üîß Security Development Patterns

### **Environment-Specific Security**

```typescript
// ‚úÖ Environment-aware security configuration
const securityConfig = {
  development: {
    allowedOrigins: ["http://localhost:3000", "http://localhost:3001"],
    jwtExpiry: "24h",
    requireHTTPS: false,
  },
  production: {
    allowedOrigins: ["https://navi-portal.awellhealth.com"],
    jwtExpiry: "1h",
    requireHTTPS: true,
  },
};

const config =
  securityConfig[process.env.NODE_ENV] || securityConfig.production;
```

## üéØ Security Testing Requirements

### **Authentication Testing**

- [ ] JWT signature validation works
- [ ] Expired tokens are rejected
- [ ] Invalid claims are handled properly
- [ ] Cross-origin restrictions enforced
- [ ] Session timeout works correctly

### **Authorization Testing**

- [ ] User can only access authorized careflows
- [ ] Activity permissions enforced
- [ ] Tenant isolation maintained
- [ ] Admin vs user permissions work

### **Security Integration Testing**

```bash
# Test cross-origin security
pnpm dev  # Starts localhost:3000 and localhost:3001

# Verify:
# 1. iframe loads with proper CSP
# 2. postMessage validation works
# 3. Authentication flows end-to-end
# 4. Unauthorized origins rejected
```

## üö® Security Incident Response

### **Authentication Failures**

- **Invalid tokens**: Log attempt, return generic error
- **Expired tokens**: Redirect to authentication flow
- **Missing tokens**: Return 401 with clear instructions
- **Brute force**: Implement rate limiting and alerting

### **Authorization Violations**

- **Careflow access denied**: Log attempt with user/careflow IDs
- **Activity permission denied**: Log and audit access attempt
- **Cross-tenant access**: Critical security alert required

## üè• Healthcare-Specific Security

### **Regulatory Compliance**

- **HIPAA**: All PHI handling must be HIPAA compliant
- **21 CFR Part 11**: Electronic records and signatures compliance
- **State regulations**: Consider state-specific healthcare data requirements
- **International**: GDPR compliance for international patients

### **Healthcare Security Patterns**

- **Audit logging**: All patient data access must be logged
- **Data minimization**: Only collect and store necessary PHI
- **Encryption**: AES-256 encryption for PHI at rest
- **Access controls**: Role-based access with principle of least privilege
