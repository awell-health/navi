---
description: When working with Form activities or individual question components of a particular user_question_type
alwaysApply: false
---

# Form Questions & Activity Events

## üéØ **Core Pattern**

```typescript
// ‚úÖ Question Component (Controller pattern)
export interface ControlledQuestionProps {
  question: Question;
  field: ControllerRenderProps<any, string>; // From react-hook-form
  fieldState: ControllerFieldState; // Includes error, invalid, isDirty, etc.
  disabled?: boolean;
  className?: string;
  // NO individual event handlers!
}
```

Example: [short-text-question.tsx](mdc:apps/navi-portal/src/components/activities/form/questions/short-text-question.tsx)

## üìä **Activity Events (Form-Level Only)**

```typescript
function FormActivity() {
  const { control, handleSubmit, watch } = useForm();
  const { emitActivityEvent } = useActivityEvents(activityId, "FORM");

  // 1. Ready event on mount
  useEffect(() => emitActivityEvent("activity-ready"), []);

  // 2. Data changes via watch()
  useEffect(() => {
    const subscription = watch((data, { name, type }) => {
      if (name && type === "change") {
        emitActivityEvent("activity-data-change", {
          field: name,
          value: data[name],
        });
        emitActivityEvent("activity-progress", {
          progress: Object.values(data).filter(Boolean).length,
          total: Object.keys(data).length,
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch]);

  // 3. Form-level focus/blur
  const onSubmit = (data) =>
    emitActivityEvent("activity-complete", { submissionData: data });

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      onFocus={() => emitActivityEvent("activity-focus")}
      onBlur={() => emitActivityEvent("activity-blur")}
    >
      {questions.map((question) => (
        <Controller
          key={question.key}
          name={question.key}
          control={control}
          rules={{
            required: question.is_required ? "This field is required" : false,
          }}
          render={({ field, fieldState }) => (
            <QuestionComponent
              question={question}
              field={field}
              fieldState={fieldState}
            />
          )}
        />
      ))}
    </form>
  );
}
```

## üé® **Branding (3 Methods)**

### **1. SlateViewer (Rich Content)**

```typescript
// ‚úÖ BEST - Perfect branding for JSON content
const parseSlateJSON = (content: string) => {
  if (content.startsWith("<")) return null;
  try {
    const parsed = JSON.parse(content);
    return Array.isArray(parsed) && hasSlateStructure(parsed) ? parsed : null;
  } catch {
    return null;
  }
};

const slateContent = parseSlateJSON(question.title);
if (slateContent) return <SlateViewer value={slateContent} />;
```

### **2. Typography Components**

```typescript
// ‚úÖ GOOD - Direct component usage
<Typography.H1>{title}</Typography.H1>
<Typography.P>{content}</Typography.P>
```

### **3. CSS Variables**

```typescript
// ‚úÖ BASIC - For simple components
"font-[var(--font-family-body,inherit)]";
"text-[var(--font-size-base,1rem)]";
"text-foreground bg-background";
```

## üö´ **Anti-Patterns**

```typescript
// ‚ùå WRONG - Individual question events
interface WrongProps {
  onFocus?: () => void;    // NO - use form-level events
  onChange?: () => void;   // NO - use react-hook-form
}

// ‚ùå WRONG - Internal state
function WrongQuestion() {
  const [value, setValue] = useState(""); // NO - use Controller
}

// ‚ùå WRONG - Complex CSS mapping
.slate-h1 { @apply navi-h1; } /* Avoid global CSS */

// ‚ùå WRONG - Fixed styling
<input className="font-sans" /> // NO - use CSS variables
```

## ‚úÖ **Quick Checklist**

- [ ] Uses `ControlledQuestionProps` interface
- [ ] Spreads `{...field}` props (no custom handlers)
- [ ] Uses SlateViewer for JSON content
- [ ] Uses CSS variables for branding: `font-[var(--font-family-body,inherit)]`
- [ ] Emits activity events at form level (not component level)
- [ ] Has Storybook stories (Default, WithHelperText, Disabled)
- [ ] Added to Activity Events Demo for testing

## üìã **Question Types**

**Text**: `SHORT_TEXT` ‚Üí Input, `LONG_TEXT` ‚Üí Textarea, `EMAIL` ‚Üí Input type="email"  
**Selection**: `YES_NO` ‚Üí RadioGroup, `MULTIPLE_CHOICE` ‚Üí RadioGroup, `MULTIPLE_SELECT` ‚Üí Checkbox group  
**Special**: `NUMBER` ‚Üí Input type="number", `DATE` ‚Üí Input type="date", `SLIDER` ‚Üí Slider, `FILE` ‚Üí File upload  
**Display**: `DESCRIPTION` ‚Üí JSON detection ‚Üí SlateViewer (preferred) or HTML fallback

## üß™ **Testing Pattern**

```typescript
// Storybook: Basic component demo
export const Default: Story = {
  render: () => <FormWrapper question={baseQuestion} />,
};

// Storybook: Activity events demo (check console)
function ActivityEventsDemo() {
  useEffect(() => console.log("üéØ", { type: "activity-ready" }), []);
  useEffect(() => {
    const sub = watch((data, { name }) =>
      console.log("üéØ", { type: "activity-data-change", field: name })
    );
    return () => sub.unsubscribe();
  }, [watch]);
}
```

**Events to verify**: `activity-ready` ‚Üí `activity-data-change` ‚Üí `activity-progress` ‚Üí `activity-complete`
