---
description: Event emitter communication patterns for activity events
alwaysApply: false
---

# Communications Domain Patterns

## Event Flow (REQUIRED)

```typescript
// 1. Generate event handlers
const { createActivityEventHandlers } = useCommunications();
const eventHandlers = createActivityEventHandlers(activityId, activityType);

// 2. Use event emitter hooks
import { useActivityEvents } from "@/domains/communications";
const { emitActivityEvent } = useActivityEvents(
  activityId,
  "FORM",
  eventHandlers
);
emitActivityEvent("activity-complete", { submissionData });
```

## Types (STRICT)

- Use `ActivityEvent` from navi-core for internal events
- Use `PostMessageActivityEvent` for iframe→parent communication
- Activity context (ID + type) MUST travel with every event

## Event Types

- `activity-ready` → `navi.activity.ready`
- `activity-complete` → `navi.activity.completed`
- `activity-data-change` → `navi.activity.data-change`
- `activity-error` → `navi.activity.error`

## ❌ NEVER DO

```typescript
// Direct PostMessage bypass
window.parent.postMessage({ type: "custom" }, "*");

// Missing activity context
emitActivityEvent("activity-ready"); // NO activityId/type
```
