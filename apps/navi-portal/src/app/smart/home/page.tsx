import React from "react";
import { type SmartSessionData, consumeSmartTicket } from "@/domains/smart";
import { SmartHomeTabs } from "./components/smart-home-tabs";
import { MedplumClientProvider } from "@/domains/medplum/MedplumClientProvider";
import {
  fetchEncounter,
  fetchPatient,
  fetchProvider,
} from "@/domains/smart/ehr";
import { PatientIdentifier } from "@awell-health/navi-core";
import { User } from "lucide-react";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

async function getSession(
  ticket?: string | null
): Promise<SmartSessionData | null> {
  if (!ticket) return null;
  return await consumeSmartTicket(ticket);
}

export default async function SmartHomePage({
  searchParams,
}: {
  searchParams: Promise<{
    ticket?: string;
  }>;
}) {
  const sp = await searchParams;
  const session = await getSession(sp?.ticket ?? null);

  // if (!session) {
  //   return (
  //     <div className="p-6">
  //       <div className="text-center">
  //         <h1 className="text-xl font-semibold text-gray-900 mb-2">
  //           No SMART Session Found
  //         </h1>
  //         <p className="text-gray-600">
  //           Please start from your EHR&apos;s SMART app launcher.
  //         </p>
  //       </div>
  //     </div>
  //   );
  // }

  // const [patient, provider, encounter] = await Promise.all([
  //   fetchPatient(session.iss, session.accessToken, session.patient),
  //   fetchProvider(session.iss, session.accessToken, session.fhirUser),
  //   fetchEncounter(session.iss, session.accessToken, session.encounter),
  // ]);

  const patient = {
    "resourceType": "Patient",
    "id": "14867dba-fb11-4df3-9829-8e8e081b39e6",
    "meta": {
      "versionId": "4",
      "lastUpdated": "2021-04-06T03:01:33.221-04:00",
      "tag": [
        {
          "system": "https://smarthealthit.org/tags",
          "code": "synthea-5-2019"
        }
      ]
    },
    "text": {
      "status": "generated",
      "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Generated by <a href=\"https://github.com/synthetichealth/synthea\">Synthea</a>.Version identifier: v2.4.0-100-g26a4b936\n .   Person seed: 1648419885364634855  Population seed: 1559319163074</div>"
    },
    "extension": [
      {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race",
        "extension": [
          {
            "url": "ombCategory",
            "valueCoding": {
              "system": "urn:oid:2.16.840.1.113883.6.238",
              "code": "2106-3",
              "display": "White"
            }
          },
          {
            "url": "text",
            "valueString": "White"
          }
        ]
      },
      {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity",
        "extension": [
          {
            "url": "ombCategory",
            "valueCoding": {
              "system": "urn:oid:2.16.840.1.113883.6.238",
              "code": "2186-5",
              "display": "Not Hispanic or Latino"
            }
          },
          {
            "url": "text",
            "valueString": "Not Hispanic or Latino"
          }
        ]
      },
      {
        "url": "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName",
        "valueString": "Tiffanie Kub"
      },
      {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex",
        "valueCode": "M"
      },
      {
        "url": "http://hl7.org/fhir/StructureDefinition/patient-birthPlace",
        "valueAddress": {
          "city": "New Bedford",
          "state": "Massachusetts",
          "country": "US"
        }
      },
      {
        "url": "http://synthetichealth.github.io/synthea/disability-adjusted-life-years",
        "valueDecimal": 0
      },
      {
        "url": "http://synthetichealth.github.io/synthea/quality-adjusted-life-years",
        "valueDecimal": 38
      }
    ],
    "identifier": [
      {
        "system": "https://github.com/synthetichealth/synthea",
        "value": "bc0fbd67-bfe3-46c8-8ce9-ef20b0705b46"
      },
      {
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
              "code": "MR",
              "display": "Medical Record Number"
            }
          ],
          "text": "Medical Record Number"
        },
        "system": "http://hospital.smarthealthit.org",
        "value": "bc0fbd67-bfe3-46c8-8ce9-ef20b0705b46"
      },
      {
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
              "code": "SS",
              "display": "Social Security Number"
            }
          ],
          "text": "Social Security Number"
        },
        "system": "http://hl7.org/fhir/sid/us-ssn",
        "value": "999-23-8054"
      },
      {
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
              "code": "DL",
              "display": "Driver's License"
            }
          ],
          "text": "Driver's License"
        },
        "system": "urn:oid:2.16.840.1.113883.4.3.25",
        "value": "S99950229"
      },
      {
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
              "code": "PPN",
              "display": "Passport Number"
            }
          ],
          "text": "Passport Number"
        },
        "system": "http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber",
        "value": "X46246395X"
      }
    ],
    "name": [
      {
        "use": "official",
        "family": "Bins",
        "given": [
          "Denny"
        ],
        "prefix": [
          "Mr."
        ]
      }
    ],
    "telecom": [
      {
        "system": "phone",
        "value": "555-475-6178",
        "use": "home"
      }
    ],
    "gender": "male",
    "birthDate": "1982-04-16",
    "address": [
      {
        "extension": [
          {
            "url": "http://hl7.org/fhir/StructureDefinition/geolocation",
            "extension": [
              {
                "url": "latitude",
                "valueDecimal": 42.246872
              },
              {
                "url": "longitude",
                "valueDecimal": -71.179462
              }
            ]
          }
        ],
        "line": [
          "101 Waters Center Unit 70"
        ],
        "city": "Dedham",
        "state": "Massachusetts",
        "postalCode": "02026",
        "country": "US"
      }
    ],
    "maritalStatus": {
      "coding": [
        {
          "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
          "code": "M",
          "display": "M"
        }
      ],
      "text": "M"
    },
    "multipleBirthBoolean": false,
    "communication": [
      {
        "language": {
          "coding": [
            {
              "system": "urn:ietf:bcp:47",
              "code": "en-US",
              "display": "English"
            }
          ],
          "text": "English"
        }
      }
    ]
  }

  if (!patient) {
    return (
      <div className="p-6">
        <div className="text-center">
          <h1 className="text-xl font-semibold text-gray-900 mb-2">
            Patient Not Found
          </h1>
          <p className="text-gray-600">
            Unable to load patient information from the EHR.
          </p>
        </div>
      </div>
    );
  }

  const patientName =
    patient.name?.[0]?.text ??
    ([...(patient.name?.[0]?.given ?? [])].join(" ")
      ? `${[...(patient.name?.[0]?.given ?? [])].join(" ")} ${
          patient.name?.[0]?.family ?? ""
        }`.trim()
      : "Unknown Patient");

  const patientIdentifier: PatientIdentifier = {
    system: "https://launch.smarthealthit.org/v/r4/fhir",
    value: patient.id ?? "",
  };

  return (
    <MedplumClientProvider>
      <div className="bg-white min-h-screen w-[550px] min-w-[550px] max-w-[550px] mx-auto">
        <div className="bg-gray-50 border-b border-gray-200 px-6 py-5">
          <div className="flex items-center gap-2">
            <User className="w-6 h-6 mr-2" /> {patientName} <span className="text-sm text-gray-500 mt-1 font-medium">({patient.id})</span>
          </div>
        </div>

        
        <SmartHomeTabs
          patient={patient}
          patientIdentifier={patientIdentifier}
        />
      </div>
    </MedplumClientProvider>
  );
}
