# Navi Monorepo - AI Agent Guidelines

## üìÅ Workspace Structure (CRITICAL)

**IMPORTANT**: "navi-monorepo" is the WORKSPACE NAME, not a folder path!

**Root workspace contains these directories:**

```
/                    ‚Üê You are here (workspace root)
‚îú‚îÄ‚îÄ apps/           ‚Üê Applications (navi-portal)
‚îú‚îÄ‚îÄ packages/       ‚Üê Libraries (navi-core, navi-js, navi-loader, navi-react)
‚îú‚îÄ‚îÄ examples/       ‚Üê Test integration examples
‚îú‚îÄ‚îÄ docs/           ‚Üê Documentation
‚îî‚îÄ‚îÄ package.json    ‚Üê Root package.json
```

**Never reference "navi-monorepo/" as a path** - all paths are relative to workspace root.

## üèóÔ∏è Repository Architecture

This is a **Stripe-like SDN architecture** with complex package dependencies. Understanding the dependency flow is critical:

```
navi-core (base) ‚Üí navi-portal (embed API) ‚Üí navi-loader (CDN) ‚Üí navi-js (NPM wrapper)
                                          ‚Üí navi-react (direct components)
```

## üìö Documentation Reference

**Read these documents for complete context:**

- **[API-CONTRACTS.md](./API-CONTRACTS.md)** - Interface compatibility tracking
- **[RELEASE-PIPELINE.md](./RELEASE-PIPELINE.md)** - Coordinated release procedures
- **[PACKAGE-GUIDELINES.md](./PACKAGE-GUIDELINES.md)** - Package-specific development rules
- **[REPOSITORY-STRATEGY.md](./REPOSITORY-STRATEGY.md)** - High-level implementation strategy
- **[README.md](./README.md)** - Repository overview and quick start

**NOTE**: We are currently in **v0.x.x development phase** - breaking changes are acceptable but require coordination!

## üö® CRITICAL RULES - DEVELOPMENT PHASE (v0.x.x)

### **1. API Contract Protection**

- **WHILE IN v0.x.x, ALWAYS ASK** before changing embed route signatures in `navi-portal`
- **WHILE IN v0.x.x, ALWAYS ASK** before changing navi-loader global API
- **ALWAYS** update API contracts in `API-CONTRACTS.md` before making breaking changes
- **NOTE**: Breaking changes are OKAY in v0.x.x but coordination is still critical

### **2. Release Coordination**

- **WHILE IN v0.x.x, ALWAYS ASK** before publishing packages independently
- **ALWAYS** test cross-package compatibility before releasing
- **WHILE IN v0.x.x, ALWAYS ASK** before deploying navi-loader to CDN without version mapping

### **3. File Protection Rules**

- **ABSOLUTE RULE**: Only the user can modify `.env` files (ID: 2526200)
- **NEVER** bypass file editing restrictions using shell commands (ID: 2526076)
- **ALWAYS** ask user to handle environment file modifications

### **4. Testing Requirements**

- **MANDATORY**: Test cross-origin functionality between localhost:3000 and localhost:3001
- **ALWAYS** test both iframe and direct React integration patterns
- **WHILE IN v0.x.x, ALWAYS ASK** before merging without testing the full customer integration flow

## üì¶ Package-Specific Guidelines

### **navi-core (Foundation)**

- **Independent releases** - Lowest in dependency chain
- **Strict backward compatibility** - Other packages depend on this
- **Types-first development** - All interfaces must be well-typed
- **No external side effects** - Pure utilities only

### **navi-portal (Embed Application)**

- **API contract owner** - Defines embed route signatures
- **Security critical** - HIPAA-aligned logging, JWT handling
- **Performance budgets**: FCP < 1000ms, TTI < 2500ms
- **WCAG 2.1 AA compliance** mandatory
- **Edge runtime evaluation** using Runtime Decision Matrix

### **navi-loader (CDN JavaScript SDK)**

- **Global API stability** - Cannot break existing customer implementations
- **Bundle size critical** - Must stay under 15KB gzipped
- **Cross-origin security** - Proper postMessage validation
- **Version awareness** - Must coordinate with CDN deployment

### **navi-js (NPM Wrapper)**

- **CDN version pinning** - Each version pins to specific CDN version
- **TypeScript types** - Full type definitions for customer DX
- **Environment detection** - Auto-switch localhost vs CDN
- **Security model** - Cannot bundle CDN script (like Stripe)

### **navi-react (React Components)**

- **React best practices** - Hooks rules, proper lifecycle management
- **Performance optimization** - Memoization, stable deps
- **Accessibility** - Full WCAG 2.1 AA support
- **Bundle efficiency** - Tree-shakeable exports

## üîÑ Development Workflow

### **Before Making Changes**

1. **Identify impact scope** - Which packages are affected?
2. **Check API contracts** - Will this break existing APIs?
3. **Review dependency flow** - What downstream effects?
4. **Plan changeset strategy** - Major/minor/patch for each package?

### **Implementation Process**

1. **Start with types** in navi-core if needed
2. **Update API contracts** before implementation
3. **Implement in dependency order** (core ‚Üí portal ‚Üí loader ‚Üí js/react)
4. **Test cross-package integration** continuously
5. **Generate changesets** for all affected packages

### **Testing Requirements**

```bash
# Always test the full integration flow
pnpm dev  # Starts both localhost:3000 and localhost:3001

# Test both integration patterns:
# 1. localhost:3001 (JS SDK) ‚Üí iframe to localhost:3000/embed
# 2. localhost:3001/react-demo (React SDK) ‚Üí direct components

# Verify cross-origin messaging works correctly
```

### **Before Merging**

- [ ] All tests pass (`pnpm test`)
- [ ] Build succeeds (`pnpm build`)
- [ ] Cross-origin integration tested
- [ ] Changesets generated for affected packages
- [ ] API contracts updated if breaking changes
- [ ] Performance budgets met

## üöÄ Release Management

### **Changeset Strategy**

```bash
# For coordinated releases affecting multiple packages
pnpm changeset

# Categories:
# - patch: Bug fixes, internal improvements
# - minor: New features, backward compatible
# - major: Breaking changes, API modifications
```

### **Version Coordination Rules** (v0.x.x Development Phase)

- **navi-core changes** ‚Üí May require minor bumps in dependent packages (ask first)
- **navi-portal embed API changes** ‚Üí Coordinate with navi-loader (breaking changes OK in v0.x.x)
- **navi-loader API changes** ‚Üí Coordinate with navi-js (breaking changes OK in v0.x.x)
- **CDN deployment** ‚Üí Update version mapping in navi-js
- **NOTE**: In v0.x.x, breaking changes are acceptable but require coordination

### **Release Order** (Must follow this sequence)

1. **navi-core** (if changed)
2. **navi-portal** (if embed routes changed)
3. **navi-loader** (build + CDN deployment)
4. **navi-js** (with updated CDN version mapping)
5. **navi-react** (if changed)

## ‚ö° Performance Requirements

### **Bundle Size Budgets**

- `navi-loader` (CDN): **15KB gzipped max**
- `navi-js` (wrapper): **2KB gzipped max**
- `navi-react`: **40KB per component max**

### **Performance Budgets**

- First Contentful Paint: **< 1000ms on 4G mobile**
- Time to Interactive: **< 2500ms**
- Iframe load time: **< 500ms**

### **Accessibility Standards**

- **WCAG 2.1 AA compliance** mandatory
- **Keyboard navigation** fully functional
- **Screen reader compatibility** tested
- **Color contrast ratios** minimum 4.5:1

## üîí Security Guidelines

### **Authentication & Authorization**

- **JWT handling** - Secure token creation and validation
- **HIPAA compliance** - Appropriate logging and data handling
- **Cross-origin security** - Proper origin validation

### **Content Security Policy**

```typescript
// Customers should use:
// script-src 'self' https://cdn.navi.com
// frame-src https://embed.navi.com
```

## üêõ Error Handling

### **Required Error Boundaries**

- **Network failures** - CDN unavailable, API errors
- **Authentication failures** - Invalid keys, expired tokens
- **Integration errors** - Missing containers, invalid options
- **Cross-origin errors** - Blocked iframes, CSP violations

### **Error Reporting**

- **User-friendly messages** - No technical jargon
- **Actionable guidance** - How to fix the problem
- **Proper error codes** - For programmatic handling

## üìã Code Quality Standards

### **TypeScript**

- **Strict mode** enabled across all packages
- **No `any` types** without explicit reasoning
- **Full type coverage** for public APIs
- **Interface segregation** - Small, focused interfaces

### **Testing**

- **Vitest** for unit/integration tests
- **Cross-origin testing** for iframe functionality
- **Edge case coverage** - Error conditions, network failures
- **Performance testing** - Bundle size, load times

### **Documentation**

- **TSDoc comments** for all public APIs
- **README updates** for significant changes
- **API contract documentation** for breaking changes
- **Migration guides** for major version bumps

## üéØ AI Agent Best Practices

### **Planning Before Implementation**

1. **Understand the full impact** - Map affected packages
2. **Do not worry about backwards compatibility until we have released v1.0** - During the initial build, stay focused on a first delivery
3. **Consider the customer migration path** for breaking changes
4. **Plan the release coordination** across packages

### **Implementation Quality**

- **Follow existing patterns** in each package
- **Maintain consistency** across the monorepo
- **Optimize for the critical path** (customer integration flow)
- **Test edge cases thoroughly** (network failures, errors)

### **Communication**

- **Clear commit messages** explaining impact scope
- **Detailed PR descriptions** with testing instructions
- **Changeset descriptions** explaining customer impact
- **Update documentation** proactively

---

## üìû When in Doubt

1. **Check API contracts** - Are you breaking compatibility?
2. **Test cross-origin flow** - Does the full integration work?
3. **Review dependencies** - What packages need updates?
4. **Ask the user** - Complex release coordination decisions

**Remember**: This is a customer-facing SDK. Every change affects real healthcare applications. Quality and reliability are paramount. üè•
